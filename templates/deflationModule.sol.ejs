abstract contract DeflationModule {
    uint256 public constant BURN_PERCENTAGE = <%= pctBurn %>;

    uint256 public constant FEE_BURN_PERCENTAGE = <%= feeBurnPercentage %>;

    uint256 public buybackFrequency;
    uint256 public buybackPercentage;

    constructor(uint256 _buybackFrequency, uint256 _buybackPercentage) {
        buybackFrequency = _buybackFrequency;
        buybackPercentage = _buybackPercentage;
    }

    function _calculateBurn(uint256 amount) internal pure returns (uint256) {
        return (amount * BURN_PERCENTAGE) / 100;
    }

    function _applyBurn(uint256 amount) internal {
        uint256 burnAmount = _calculateBurn(amount);
        _burn(msg.sender, burnAmount);
    }

    function _burn(address account, uint256 amount) internal virtual;

     function executeBuybackAndBurn() public virtual {
        uint256 availableTokens = _getBuybackTokenBalance();
        uint256 buybackAmount = (availableTokens * buybackPercentage) / 100;
        require(buybackAmount > 0, "No tokens available for buyback");
        _burn(address(this), buybackAmount);
    }

    function _getBuybackTokenBalance() internal view virtual returns (uint256);

    function _calculateFeeBurn(uint256 feeAmount) internal pure returns (uint256) {
        return (feeAmount * FEE_BURN_PERCENTAGE) / 100;
    }
}
