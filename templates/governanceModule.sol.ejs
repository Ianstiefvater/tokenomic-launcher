abstract contract GovernanceModule {
    uint256 public proposalThreshold = <%= proposalThreshold %>;
    uint256 public quorum = <%= quorum %>;
    bool public weightedByStaking = <%= weightedByStaking %>;

    struct Proposal {
        uint256 id;
        address proposer;
        string description;
        uint256 voteFor;
        uint256 voteAgainst;
        uint256 deadline;
        bool executed;
    }
    
    uint256 public proposalCount;
    mapping(uint256 => Proposal) public proposals;
    mapping(uint256 => mapping(address => bool)) public hasVoted;

    event ProposalCreated(uint256 id, address proposer, string description, uint256 deadline);
    event Voted(uint256 proposalId, address voter, bool support, uint256 weight);
    event ProposalExecuted(uint256 id, bool approved);

    function _getTokenBalance(address account) internal view virtual returns (uint256);
    function createProposal(string memory description, uint256 duration) public virtual {
        require(_getTokenBalance(msg.sender) >= proposalThreshold, "You do not have enough tokens to propose");
        proposalCount++;
        proposals[proposalCount] = Proposal({
            id: proposalCount,
            proposer: msg.sender,
            description: description,
            voteFor: 0,
            voteAgainst: 0,
            deadline: block.timestamp + duration,
            executed: false
        });
        emit ProposalCreated(proposalCount, msg.sender, description, block.timestamp + duration);
    }

    function vote(uint256 proposalId, bool support, uint256 weight) public virtual {
        Proposal storage proposal = proposals[proposalId];
        require(block.timestamp < proposal.deadline, "Voting has ended");
        require(!hasVoted[proposalId][msg.sender], "You have already voted on this proposal");
        hasVoted[proposalId][msg.sender] = true;
        if (support) {
            proposal.voteFor += weight;
        } else {
            proposal.voteAgainst += weight;
        }
        emit Voted(proposalId, msg.sender, support, weight);
    }

    function executeProposal(uint256 proposalId) public virtual {
        Proposal storage proposal = proposals[proposalId];
        require(block.timestamp >= proposal.deadline, "Voting is not yet complete");
        require(!proposal.executed, "The proposal has already been executed");
        uint256 totalVotes = proposal.voteFor + proposal.voteAgainst;
        require(totalVotes >= quorum, "The required quorum was not reached");
        bool approved = proposal.voteFor > proposal.voteAgainst;
        proposal.executed = true;
        emit ProposalExecuted(proposalId, approved);
    }
}
