abstract contract FeeModule {
    uint256 public constant DEVELOPER_FEE_BP = 10;

    uint256 public pctTransactionFee = <%= pctTransactionFee %>;

    address public immutable commissionReceiver;

    constructor(address _commissionReceiver) {
        require(_commissionReceiver != address(0), "Invalid commission address");
        commissionReceiver = _commissionReceiver;
    }

    function _calculateTotalFee(uint256 amount) internal view returns (uint256) {
        return (amount * pctTransactionFee) / 10000;
    }

    function _calculateDeveloperFee(uint256 amount) internal pure returns (uint256) {
        return (amount * DEVELOPER_FEE_BP) / 10000;
    }

    function _calculateDistributionFee(uint256 amount) internal view returns (uint256) {
        uint256 totalFee = _calculateTotalFee(amount);
        uint256 developerFee = _calculateDeveloperFee(amount);
        require(totalFee >= developerFee, "The total fee must be greater than or equal to the developer fee");
        return totalFee - developerFee;
    }

    function _distributeDeveloperFee(uint256 amount) internal {
        uint256 developerFee = _calculateDeveloperFee(amount);
        require(address(this).balance >= developerFee, "Insufficient balance for developer fee");
        payable(commissionReceiver).transfer(developerFee);
    }

    function _processFees(uint256 amount) internal returns (uint256 totalFee) {
        totalFee = _calculateTotalFee(amount);
        _distributeDeveloperFee(amount);
        return totalFee;
    }
}
