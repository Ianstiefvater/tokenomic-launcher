abstract contract FeeModule {
    uint256 public constant DEVELOPER_FEE_BP = 10; 


    address public immutable commissionReceiver;

    constructor(address _commissionReceiver) {
        require(_commissionReceiver != address(0), "Invalid commission address");
        commissionReceiver = _commissionReceiver;
    }

    function _calculateTotalFee(uint256 amount) public view returns (uint256) {
        return _calculateDeveloperFee(amount);
    }



    function _calculateDeveloperFee(uint256 amount) internal pure returns (uint256) {
        return (amount * DEVELOPER_FEE_BP) / 10000;
    }


    function _processFees(address sender, uint256 amount) internal returns (uint256) {
        uint256 devFee = _calculateDeveloperFee(amount);
        _feeTransfer(sender, commissionReceiver, devFee);
        return devFee;
    }
    function _feeTransfer(address from, address to, uint256 amount) internal virtual;

}
