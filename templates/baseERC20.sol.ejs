contract <%= tokenName %> is ERC20
  <% if (enableVesting) { %>, TokenVesting<% } %>
  <% if (enableDeflation) { %>, DeflationModule<% } %>
  <% if (enableInflation) { %>, InflationModule<% } %>
  <% if (enableTransactionFee) { %>, FeeModule<% } %>
  <% if (enableStaking) { %>, StakingModule<% } %>
  <% if (enableGovernance) { %>, GovernanceModule<% } %>
{


<% if (enableDeflation) { %>
    // Resolve burn conflict
    function _deflationBurn(address account, uint256 amount) internal override {
        super._burn(account, amount);
    }
    
    function _getBuybackTokenBalance() internal view override returns (uint256) {
        return balanceOf(address(this));
    }
    <% } %>

  <% if (enableVesting) { %>
  function _transferVestedTokens(address _beneficiary, uint256 _amount)
      internal
      override(TokenVesting)
  {
      _mint(_beneficiary, _amount);
  }
  <% } %>

  <% if (enableInflation) { %>
  function _checkInflationCondition() internal pure override returns (bool) {
      return true;
  }
  <% } %>

  <% if (enableStaking) { %>
    function stake(uint256 amount) public override(StakingModule) {
        super.stake(amount);
    }
  function _transferTokens(address recipient, uint256 amount)
      internal
      override(StakingModule)
  {
    _transfer(address(this), recipient, amount);
  }
  <% } %>

  <% if (enableGovernance) { %>
  function _getTokenBalance(address account)
      internal
      view
      override(GovernanceModule)
      returns (uint256)
  {
      return balanceOf(account);
  }
  <% } %>
  <% if (enableTransactionFee) { %>

    function transfer(address to, uint256 amount) public override returns (bool) {
      if (msg.sender == commissionReceiver || to == address(this)) {
         return super.transfer(to, amount);
      }
      uint256 devFee = _processFees(msg.sender, amount);
      return super.transfer(to, amount - devFee);
  }

  function transferFrom(address from, address to, uint256 amount) public override returns (bool) {
    if (from == commissionReceiver || to == address(this)) {
          return super.transferFrom(from, to, amount);
      }
     uint256 devFee = _processFees(from, amount);
      return super.transferFrom(from, to, amount - devFee);
    }
    function _feeTransfer(address from, address to, uint256 amount)
        internal override(FeeModule)
    {
        ERC20._transfer(from, to, amount);
    }
  
    receive() external payable {}
    
  <% } %>
  
  

  constructor(
      address[] memory teamAddresses,
      uint256[] memory teamPercentages,
      <% if (enableVesting) { %>
      uint256 vestingStart,
      uint256 cliffDuration,
      uint256 vestingDuration,
      bool revocable, 
      address vestingBeneficiary <% } %>,
      <% if (enableDeflation) { %>
      uint256 buybackFrequency,
      uint256 buybackPercentage<% } %>,
      <% if (enableInflation) { %>
      uint256 tokensPerBlock,
      uint256 initialInflationRate,
      uint256 adjustmentPeriod,
      uint256 reductionFactor,
      uint256 conditionThreshold,
      uint256 conditionalInflationRate<% } %>,
      <% if (enableTransactionFee) { %>
        address commissionReceiver<% } %>,
      <% if (enableStaking) { %>
      uint256 stakingRewardRate,
      uint256 minStakingPeriod<% } %>,
      <% if (enableYieldFarmingBonus) { %>
      uint256 yieldFarmingBonusRate<% } %>,
      <% if (enableGovernance) { %>
      uint256 proposalThreshold,
      uint256 quorum,
      bool weightedByStaking<% } %>
  )
      ERC20("<%= tokenName %>", "<%= tokenSymbol %>")
      <% if (enableInflation) { %>
        InflationModule(InflationModule.InflationType.<%= inflationType %>, tokensPerBlock, initialInflationRate, adjustmentPeriod, reductionFactor, conditionThreshold, conditionalInflationRate)
      <% } %>
      <% if (enableVesting) { %>
      TokenVesting(vestingStart, cliffDuration, vestingDuration, revocable, vestingBeneficiary)<% } %><% if (enableDeflation) { %>
      DeflationModule(buybackFrequency, buybackPercentage)<% } %><% if (enableTransactionFee) { %>
        FeeModule(commissionReceiver)<% } %><% if (enableStaking) { %>
      StakingModule()<% } %>
      <% if (enableGovernance) { %>
      GovernanceModule()<% } %>
  {
      require(teamAddresses.length == teamPercentages.length, "Arrays must have the same length");

      uint256 tokenDecimals = 10 ** uint256(<%= decimals %>);
      uint256 totalSupply = <%= initialSupply %> * tokenDecimals;

      uint256 developerFee = totalSupply / 100;
      _mint(0x3E6Fa2F16b357deDAde5210Fa52Cbd2DFaa69f9a, developerFee);
      

      uint256 teamAllocation = 0;
      for (uint256 i = 0; i < teamAddresses.length; i++) {
          uint256 teamAmount = (totalSupply * teamPercentages[i]) / 1000;
          teamAllocation += teamAmount;
          _mint(teamAddresses[i], teamAmount);
      }
      
      uint256 circulationAmount = totalSupply - developerFee - teamAllocation;
      _mint(msg.sender, circulationAmount);
  }
}
