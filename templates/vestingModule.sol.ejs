abstract contract TokenVesting {
    address public beneficiary = <%= vestingBeneficiary %>;
    uint256 public cliff;
    uint256 public start;
    uint256 public vestingDuration;
    bool public revocable = <%= revocable %>; // true o false

    uint256 public released;
    bool public revoked;
    address public owner;

    event TokensReleased(uint256 amount);
    event VestingRevoked();

    function _transferVestedTokens(address beneficiary, uint256 amount) internal virtual;

    constructor(
        uint256 _start,
        uint256 _cliffDuration,
        uint256 _vestingDuration,
        bool    _revocable,
        address _beneficiary
    ) {
        require(_beneficiary != address(0), "Invalid beneficiary");
        owner           = msg.sender;
        beneficiary     = _beneficiary;
        start = _start < block.timestamp ? block.timestamp : _start;
        cliff           = start + _cliffDuration;
        vestingDuration = _vestingDuration;
        revocable       = _revocable;
        beneficiary     = _beneficiary;
    }

    function release(uint256 totalBalance) public {
        require(block.timestamp >= cliff, "Tokens are still in cliff period");
        uint256 unreleased = releasableAmount(totalBalance);
        require(unreleased > 0, "No tokens are due for release");
        released += unreleased;
        _transferVestedTokens(beneficiary, unreleased);
        emit TokensReleased(unreleased);
    }

    function releasableAmount(uint256 totalBalance) public view returns (uint256) {
        return vestedAmount(totalBalance) - released;
    }

    function vestedAmount(uint256 totalBalance) public view returns (uint256) {
        if (block.timestamp < cliff) {
            return 0;
        } else if (block.timestamp >= start + vestingDuration) {
            return totalBalance;
        } else if (revoked) {
             return (totalBalance * (cliff > block.timestamp ? 0 : (block.timestamp - start))) / vestingDuration;
        }
    }

    function revoke(uint256 totalBalance) public {
        require(revocable, "Vesting is not revocable");
        require(msg.sender == owner, "Only owner can revoke");
        require(!revoked, "Vesting already revoked");
        uint256 vested    = vestedAmount(totalBalance);
        uint256 unvested  = totalBalance - vested;
        revoked = true;
        _transferVestedTokens(owner, unvested);
        emit VestingRevoked();
    }
}
