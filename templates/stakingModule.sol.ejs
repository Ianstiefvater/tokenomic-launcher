abstract contract StakingModule {
    uint256 public stakingRewardRate = <%= stakingRewardRate %>;
    uint256 public minStakingPeriod = <%= minStakingPeriod %>;
    uint256 public yieldFarmingBonusRate = <%= yieldFarmingBonusRate %>;

    struct Stake {
        uint256 amount;
        uint256 startTime;
    }
    
    mapping(address => Stake) public stakes;
    
    event Staked(address indexed staker, uint256 amount);
    event Unstaked(address indexed staker, uint256 amount, uint256 reward);

    function _transferTokens(address recipient, uint256 amount) internal virtual;

    function stake(uint256 amount) public virtual {
        require(amount > 0, "The amount must be greater than 0");
        Stake storage userStake = stakes[msg.sender];
        require(userStake.amount == 0, "You already have active staking");
        userStake.amount = amount;
        userStake.startTime = block.timestamp;
        emit Staked(msg.sender, amount);
    }

    function unstake() public virtual {
        Stake storage userStake = stakes[msg.sender];
        require(userStake.amount > 0, "There is no active staking");
        require(block.timestamp >= userStake.startTime + minStakingPeriod, "Minimum staking period not met");
        uint256 reward = calculateReward(msg.sender);
        uint256 totalAmount = userStake.amount + reward;
        userStake.amount = 0;
        userStake.startTime = 0;
        emit Unstaked(msg.sender, totalAmount, reward);
        _transferTokens(msg.sender, totalAmount);
    }

    function calculateReward(address staker) public view virtual returns (uint256) {
        Stake memory userStake = stakes[staker];
        if(userStake.amount == 0) {
            return 0;
        }
        uint256 stakingDuration = block.timestamp - userStake.startTime;
        uint256 totalRate = stakingRewardRate + yieldFarmingBonusRate;
        uint256 reward = (userStake.amount * totalRate * stakingDuration) / (365 days * 100);
        return reward;
    }
}
